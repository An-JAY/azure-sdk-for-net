// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.AlertsManagement.Models
{
    /// <summary>
    /// Scheduling configuration for a given alert processing rule.
    /// Serialized Name: AlertProcessingRuleSchedule
    /// </summary>
    public partial class AlertProcessingRuleSchedule
    {
        /// <summary> Initializes a new instance of AlertProcessingRuleSchedule. </summary>
        public AlertProcessingRuleSchedule()
        {
            Recurrences = new ChangeTrackingList<AlertProcessingRuleRecurrence>();
        }

        /// <summary> Initializes a new instance of AlertProcessingRuleSchedule. </summary>
        /// <param name="effectiveFrom">
        /// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
        /// Serialized Name: AlertProcessingRuleSchedule.effectiveFrom
        /// </param>
        /// <param name="effectiveUntil">
        /// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
        /// Serialized Name: AlertProcessingRuleSchedule.effectiveUntil
        /// </param>
        /// <param name="timeZone">
        /// Scheduling time zone.
        /// Serialized Name: AlertProcessingRuleSchedule.timeZone
        /// </param>
        /// <param name="recurrences">
        /// List of recurrences.
        /// Serialized Name: AlertProcessingRuleSchedule.recurrences
        /// Please note <see cref="AlertProcessingRuleRecurrence"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DailyRecurrence"/>, <see cref="AlertProcessingMonthlyRecurrence"/> and <see cref="AlertProcessingWeeklyRecurrence"/>.
        /// </param>
        internal AlertProcessingRuleSchedule(DateTimeOffset? effectiveFrom, DateTimeOffset? effectiveUntil, string timeZone, IList<AlertProcessingRuleRecurrence> recurrences)
        {
            EffectiveFrom = effectiveFrom;
            EffectiveUntil = effectiveUntil;
            TimeZone = timeZone;
            Recurrences = recurrences;
        }

        /// <summary>
        /// Scheduling effective from time. Date-Time in ISO-8601 format without timezone suffix.
        /// Serialized Name: AlertProcessingRuleSchedule.effectiveFrom
        /// </summary>
        public DateTimeOffset? EffectiveFrom { get; set; }
        /// <summary>
        /// Scheduling effective until time. Date-Time in ISO-8601 format without timezone suffix.
        /// Serialized Name: AlertProcessingRuleSchedule.effectiveUntil
        /// </summary>
        public DateTimeOffset? EffectiveUntil { get; set; }
        /// <summary>
        /// Scheduling time zone.
        /// Serialized Name: AlertProcessingRuleSchedule.timeZone
        /// </summary>
        public string TimeZone { get; set; }
        /// <summary>
        /// List of recurrences.
        /// Serialized Name: AlertProcessingRuleSchedule.recurrences
        /// Please note <see cref="AlertProcessingRuleRecurrence"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DailyRecurrence"/>, <see cref="AlertProcessingMonthlyRecurrence"/> and <see cref="AlertProcessingWeeklyRecurrence"/>.
        /// </summary>
        public IList<AlertProcessingRuleRecurrence> Recurrences { get; }
    }
}
